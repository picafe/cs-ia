// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/@prisma/client"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  name           String
  password_hash  String
  sessions       Session[]
  passwordResets PasswordReset[]

  role       Role  @default(STUDENT)

  teacher TeacherUser?
  student StudentUser?

  // totalHours Float @default(0)

  // class Class? @relation(fields: [classId], references: [id])
  // classId Int? 

  // activities Activity[]
}

model StudentUser {
  id Int @id @default(autoincrement())
  userId Int @unique
  user User @relation(fields: [userId], references: [id])

  status UserStatus @default(NOT_STARTED)
  totalHours Float @default(0)

  class Class? @relation(fields: [classId], references: [id])
  classId Int? 

  activities Activity[]

}

model TeacherUser {
  id Int @id @default(autoincrement())
  userId Int @unique
  user User @relation(fields: [userId], references: [id])

  classes Class[]
}

enum Role {
  TEACHER
  STUDENT
}

enum UserStatus {
  NOT_STARTED
  ON_TRACK
  CONCERN
  ALERT
  COMPLETED
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model PasswordReset {
  id            String   @id
  userId        Int
  user          User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  email         String
  code          String
  expiresAt     DateTime
  emailVerified Boolean
}

model Class {
  id          Int    @id @default(autoincrement())
  name        String
  courseCode  String
  description String
  code        String    @unique

  teacherId   Int
  TeacherUser TeacherUser @relation(fields: [teacherId], references: [userId])

  endDate DateTime?

  students StudentUser[]

  dueDates DueDate[]

}

model DueDate {
  id            Int      @id @default(autoincrement())
  classId       Int
  dueDate       DateTime // Deadline for completing hours
  requiredHours Float // Number of hours required by this deadline
  class         Class    @relation(fields: [classId], references: [id])
}

model Activity {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  userId      Int
  user        StudentUser   @relation(fields: [userId], references: [id])
  logs        Log[]
}

model Log {
  id         Int      @id @default(autoincrement())
  userId     Int
  activityId Int
  createdAt  DateTime
  updatedAt  DateTime
  typingTime Int
  activity   Activity @relation(fields: [activityId], references: [id])
}
