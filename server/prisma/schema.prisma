// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int    @id @default(autoincrement())
  email         String @unique
  name          String
  password_hash String
  sessions       Session[]
  passwordResets PasswordReset[]


  role          Role   @default(STUDENT)
  totalHours     Float     @default(0)
    
  class Class
  activities Activity[]
}

enum Role {
  TEACHER
  STUDENT
}



enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  MET_REQUIREMENTS
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model PasswordReset {
  id            String   @id
  userId        Int
  user          User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  email         String
  code          String
  expiresAt     DateTime
  emailVerified Boolean
}

model Class {
  id          Int      @id @default(autoincrement())
  name        String
  courseCode  String
  description String
  teacherId   Int
  
  endDate     DateTime?

  activities Activity[]
  dueDates    DueDate[]
}


model DueDate {
  id          Int       @id @default(autoincrement())
  classId     Int
  dueDate     DateTime  // Deadline for completing hours
  requiredHours Float    // Number of hours required by this deadline
  class       Class     @relation(fields: [classId], references: [id])
}

model Activity {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  classId     Int
  class       Class    @relation(fields: [classId], references: [id])
  logs        Log[]
  
}

model Log {
  id          Int      @id @default(autoincrement())
  userId      Int
  activityId  Int
  classId     Int
  createdAt   DateTime
  updatedAt   DateTime
  typingTime  Int
  activity    Activity @relation(fields: [activityId], references: [id])
}